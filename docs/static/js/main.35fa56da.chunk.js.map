{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridIem","img","className","src","url","alt","title","getGifs","category","a","fetch","encodeURI","response","json","res","data","gifs","map","id","images","downsized_medium","console","log","error","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","GifExpertApp","categories","el","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCGhBG,EATI,SAACC,GAChB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,4BAAIL,EAAIK,Y,uBCJdC,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACG,mCADH,kBAGeC,MAAM,gDAAD,OAFjB,mCAEiB,cAA6DC,UAAUH,GAAvE,aAHpB,cAGFI,EAHE,gBAIUA,EAASC,OAJnB,cAIFC,EAJE,OAKAC,EAASD,EAATC,KACFC,EAAOD,EAAKE,KAAI,SAAAhB,GAAQ,IAAD,EACzB,MAAO,CAAEiB,GAAIjB,EAAIiB,GAAIZ,MAAOL,EAAIK,MAAOF,IAAG,UAAEH,EAAIkB,cAAN,aAAE,EAAYC,iBAAiBhB,QAE7EiB,QAAQC,IAAIN,GATJ,kBAUDA,GAVC,yCAYRK,QAAQE,MAAR,MAZQ,kFAAH,sDAiBEhB,ICIAiB,EAlBM,SAAChB,GAClB,MAA0BrB,mBAAS,CAC/B4B,KAAM,GACNU,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNrB,EAAQC,GAAUqB,MAAK,SAAAC,GACnBH,EAAS,CACLZ,KAAMe,EACNL,SAAS,SAGlB,CAACjB,IAEGkB,GCEIK,EAfC,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAEf,EAAkCgB,EAAahB,GAAjCW,EAAd,EAAQJ,KAAcU,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIvB,UAAU,oCAAd,SAAmDM,IAClDiB,EAAU,mBAAGvB,UAAU,mCAAb,qBAA6D,qBAAKA,UAAU,YAAf,SACnEiB,EAAOF,KAAI,SAAChB,GAAD,OAAU,cAAC,EAAD,eAA6BA,GAAZA,EAAIiB,aCS5Cc,EAlBM,WAEjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK+C,EAAWhB,KAAI,SAACiB,GAAD,OACX,cAAC,EAAD,CAAkB1B,SAAU0B,GAAdA,YCVnCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.35fa56da.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from 'prop-types'\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(\"\");\n    const handleChangeValue = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 1) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue(\"\")\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handleChangeValue} />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","const GifGridIem = (img) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={img.url} alt={img.title}/>\n            <p>{img.title}</p>\n        </div>\n    );\n}\n\nexport default GifGridIem;","const getGifs = async (category) => {\n    const apiKey = \"UqyzU8q7snCYTHwd00pNS4gkmjnurHfs\";\n    try {\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=5`);\n        const res = await response.json();\n        const { data } = res;\n        const gifs = data.map(img => {\n            return { id: img.id, title: img.title, url: img.images?.downsized_medium.url }\n        })\n        console.log(gifs);\n        return gifs;\n    } catch (error) {\n        console.error(error);\n        return error;\n    }\n}\n\nexport default getGifs","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        })\n    }, [category]);\n\n    return state;\n}\n\nexport default useFetchGifs;","\nimport GifGridIem from './GifGridItem';\n\nimport useFetchGifs from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading ? <p className=\"animate__animated animate__flash\">Loading</p>: <div className=\"card-grid\">\n                {images.map((img) => (<GifGridIem key={img.id} {...img} />))}\n            </div>}\n\n        </>\n    );\n}\n\nexport default GifGrid;","import { useState } from \"react\";\nimport AddCategory from './AddCategory'\nimport GifGrid from './GifGrid'\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([\"samurai x\"])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {categories.map((el) =>\n                    (<GifGrid key={el} category={el} />)\n                )}\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}